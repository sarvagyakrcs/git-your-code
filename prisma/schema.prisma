
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [vector]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id String @id @default(cuid())
  email String 
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String 
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  hello Int?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name String?
  userName      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]

  // relations
  userToProjects UserToProjects[]
  questionsAsked Question[]

  @@map("users")
}

// A user can have multiple projects and a project can have multiple users so a many to many relationship is created
model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  name      String
  githubURL String

  // relations
  userToProjects UserToProjects[]
  commits Commit[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  savedQuestions Question[]
}

model UserToProjects {
  id        String   @id @default(cuid())
  projectId String 
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Commit {
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  commitMessage String
  commitHash String
  commitAuthorName String
  commitAuthorAvatar String

  summary String? // AI Summary
}

model Error {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String
  stack String
}

model SourceCodeEmbedding {
  id        String   @id @default(cuid())
  
  summaryEmbedding Unsupported("vector(768)")? // vector of 768 dimensions
  sourceCode String
  fileName String
  summary String

  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Question {
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String
  answer String

  filesReference Json
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}